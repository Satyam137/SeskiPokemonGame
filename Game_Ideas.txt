import pygame
import random
import os
class Pokemon:
    def __init__(self,type,name,level,moves,hp,atk,dfc):
        self.name=name
        self.type=type
        self.health=10*level
        self.moves=moves
        self.hp=hp
        self.atk=atk
        self.dfc=dfc
        self.level=level
    def damageCalculator(self, enemy, move):
        final_damage = ((((2 * self.level) / 5) + 2) * move.bp * (self.atk /enemy.pokemon.dfc)) // 15
        criticalhitChance = random.randint(0, 9)
        if criticalhitChance == 0:
            final_damage = final_damage * 1.5
        return final_damage
class Charmander(Pokemon):
    def __init__(self, level):
        super().__init__(name='Charmander', type='Fire', moves=[Tackle,Growl,Ember], level=level, atk=54, dfc= 35, hp = 40)

class Bulbasaur(Pokemon):
    def __init__(self, level):
        super().__init__(name='Bulbasaur', type='Grass', moves=[Tackle,Growl,bulletseed], level=level,atk=42, dfc= 40, hp = 64)

class Squirtle(Pokemon):
    def __init__(self, level):
        super().__init__(name='Squirtle', type='Water', moves=[watergun,Tailwhip], level=level,atk=32, dfc= 55, hp = 50)

class Pikachu(Pokemon):
    def __init__(self, level):
        super().__init__(name='Pikachu', type='Electric', moves=[spark,Tailwhip], level=level,atk=60, dfc= 35, hp = 34)

class Eevee(Pokemon):
    def __init__(self, level):
        super().__init__(name='Eevee', type='Normal', moves=[Tackle,Growl], level=level, atk = 40, dfc = 40, hp=40)
class Player:
    def __init__(self, pokemon):
        pass
    def select(self, pokemon):
        if pokemon == "Charmander":
            self.pokemon = Charmander(level=5)
            print("U choosed Charmander")
        elif pokemon == "Bulbasaur":
            self.pokemon = Bulbasaur(level=5)
            print("U choosed Bulbasaur")
        elif pokemon == "Squirtle":
            self.pokemon = Squirtle(level=5)
            print("U choosed Squirtle")
        elif pokemon == "Pikachu":
            self.pokemon = Pikachu(level=5)
            print("U choosed Pikachu")
        elif pokemon == "Eevee":
            self.pokemon = Eevee(level=5)
            print("U choosed Eevee")

    def attack(self, enemy, move):
        damage = int(self.pokemon.damageCalculator(enemy, move))
        if move.name != ("Growl") and move.name != ("Tailwhip"):
            print(f"{self.pokemon.name} used {move.name} did {damage} damage")
            enemy.pokemon.hp-=damage
            if(enemy.pokemon.hp>0):
                print(f" {enemy.pokemon.name} hp remaining {enemy.pokemon.hp}")
            else:
                print(f"{enemy.pokemon.name} fainted")
                return
        elif move.name == "Growl":
            print(f"{self.pokemon.name} used Growl {enemy.pokemon.name} attack decreased ")
            enemy.pokemon.atk -= 2
        elif move.name == "Tailwhip":
            print(f"{self.pokemon.name} used Tailwhip {enemy.pokemon.name} defence decreased")
            enemy.pokemon.dfc -= 2

# ... (previous code)

class enemy:
    def select(self):
        i = random.randint(0, 4)
        if i == 0:
            self.pokemon = Charmander(level=1)
        elif i == 1:
            self.pokemon = Bulbasaur(level=1)
        elif i == 2:
            self.pokemon = Squirtle(level=1)
        elif i == 3:
            self.pokemon = Pikachu(level=1)
        elif i == 4:
            self.pokemon = Eevee(level=1)
        print(f"a wild {self.pokemon.name} has appeared")
    def attack(self, enemy, move):
        damage = int(self.pokemon.damageCalculator(enemy, move))
        if move.name != ("Growl") and move.name != ("Tailwhip"):
            print(f"{self.pokemon.name} used {move.name} did {damage} damage")
            player.pokemon.hp-=damage
            if(player.pokemon.hp>=0):
                print(f" {player.pokemon.name} hp remaining {player.pokemon.hp}")
            else:
                print(f"{player.pokemon.name} fainted")
        elif move.name == "Growl":
            print(f"{self.pokemon.name} used Growl {player.pokemon.name} attack decreased ")
            player.pokemon.atk -= 2
        elif move.name == "Tailwhip":
            print(f"{self.pokemon.name} used Tailwhip {player.pokemon.name} defence decreased")
            player.pokemon.dfc -= 2
class Move(Pokemon):
    def __init__(self,name,type,bp,effects):
        self.type=type
        self.bp=bp
        self.effects=[]
        self.name=name
bulletseed = Move('bulletseed','Grass', 40, ['hplower'])
Tackle=Move('Tackle','Normal',40,['hplower'])
Growl=Move('Growl','Normal',0,['atklower'])
Ember = Move('Ember','Fire', bp=40, effects=['burn','hplower'])
spark = Move('Spark','Electric', bp=40, effects=['paralyze','hplower'])
watergun = Move('watergun','Water', bp=40, effects=['hplower'])
earthquake = Move('earthquake','Ground', bp=100, effects=['hplower'])
Tailwhip=Move('Tailwhip','Normal',bp=0,effects=['dfclower'])
player = Player(Charmander)
team = enemy()
game = 0
while True:
    if game == 0:
        team.select()
        game = 1
    if game == 1:
        n = int(input("Choose a pokemon \n1.Charmander  2.Pikachu\n3.Bulbasaur   3.Squirtle\n"))
        if n == 1:
            player.select("Charmander")
        elif n == 2:
            player.select("Pikachu")
        elif n == 3:
            player.select("Bulbasaur")
        elif n == 4:
            player.select("Squirtle")
        game = 2
    if game == 2:
        print("Select Move")
        for i in range(len(player.pokemon.moves)):
            print(f"{i + 1}.{player.pokemon.moves[i].name}", end=" ")
        print("")
        n = int(input())
        move = player.pokemon.moves[n - 1]
        if(player.pokemon.hp>0):
            player.attack(team, move)
        else:
            print('You lost')
            break
        n = random.randint(0, len(team.pokemon.moves)-1)
        if(team.pokemon.hp>0):
            move = team.pokemon.moves[n]
        else:
            print("You win")
            break
        team.attack(player, move)
